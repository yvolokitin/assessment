// questions translation
export const questions = {
    // English
    'en': {
        'practise_automation_q1': '1.1 Do you follow test automation pyramid principles to build test automation?',
        'practise_automation_q2': '1.2 Are your automated tests traceable to the test cases?',
        'practise_automation_q3': '1.3 Are automated tests executed in the environment isolated from manual testing?',
        'practise_automation_q4': '1.4 Are automated tests independent from each other?',
        'practise_automation_q5': '1.5 How do you prepare Test Data for Automated tests?',
        'practise_automation_q6': '1.6 Do you have a strategy to prevent defect reopen?',
        'practise_automation_q7': '1.7 Do you review failed reports from auto tests?',

        'practise_unit_test_q1': '2.1 Do you have unit tests?',
        'practise_unit_test_q2': '2.2 Do you execute Unit tests in CI in Pre-commit, post-commit and merge?',
        'practise_unit_test_q3': '2.3 Do you measure code coverage for unit tests?',
        'practise_unit_test_q4': '2.4 Do you have a unit test coverage target?',
        'practise_unit_test_q5': '2.5 Are your Unit Test targets met across all the components?',
        'practise_unit_test_q6': '2.6 Have you integrated unit test code coverage with a continuous integration tool and IDE?',
        'practise_unit_test_q7': '2.7 Do you use Test-driven development (TDD)?',

        'practise_component_test_q1': '3.1 Do you have automated Component tests?',
        'practise_component_test_q2': '3.2 Do you integrate automated Component tests in CI pipeline?',
        'practise_component_test_q3': '3.3 Do you track Component tests coverage (by methods, services covered)?',
        'practise_component_test_q4': '3.4 Do you have automated Integration tests?',
        'practise_component_test_q5': '3.5 Do you integrate automated Integration tests in CI pipeline?',
        'practise_component_test_q6': '3.6 Do you execute Integration tests right after each deployment on CI environment?',
        'practise_component_test_q7': '3.7 Do you track Integration tests coverage (by methods, services covered)?',
        'practise_component_test_q8': '3.8 Do you use Mocks or Simulator with Component or Integration tests?',

        // smokeregression
        'practise_smokeregression_q1': '4.1 Do you have Smoke Tests and is it documented?',
        'practise_smokeregression_q2': '4.2 Is Smoke Test automated (% of automated tests)?',
        'practise_smokeregression_q3': '4.3 Is Smoke Test integrated into CI and executed?',
        'practise_smokeregression_q4': '4.4 What is Smoke tests execution time for AUTOMATED tests?',
        'practise_smokeregression_q5': '4.5 Do you have flickering results in your Automated Smoke Tests?',
        'practise_smokeregression_q6': '4.6 Do you have Automated Regression Testing (suites) on system-integration level?',
        'practise_smokeregression_q7': '4.7 How often do you execute Regression Tests?',
        'practise_smokeregression_q8': '4.8 What is the percentage of Automated Regression Tests?',
        'practise_smokeregression_q9': '4.9 Do you track automated Regression Test coverage by business cases / requirements?',
        'practise_smokeregression_q10': '4.10 What is Regression Test execution time for Automated tests?',

        'practise_code_quality_q1': '5.1 Do you have style guides and standards?',
        'practise_code_quality_q2': '5.2 Do you use style checker tool in IDE?',
        'practise_code_quality_q3': '5.3 Do you use dependency management tool? ',
        'practise_code_quality_q4': '5.4 Do you practice peer code review?',
        'practise_code_quality_q5': '5.5 Do you have Code Reviewers assignment strategy? ',
        'practise_code_quality_q6': '5.6 Do you have a professional tool for code review?',
        'practise_code_quality_q7': '5.7 Do have code review check list?',
        'practise_code_quality_q8': '5.8 Do you use static code analysis tools?',
        'practise_code_quality_q9': '5.9 Do you use pre-commit code review?',

        'practise_testcase_management_q1': '6.1 Do you document test cases?',
        'practise_testcase_management_q2': '6.2 Do you base test cases creation not only on requirements? ',
        'practise_testcase_management_q3': '6.3 Do you create test cases based on defects analysis?',
        'practise_testcase_management_q4': '6.4 Do you prioritize test cases?',
        'practise_testcase_management_q5': '6.5 Do you have practice of test case review (like code review)?',
        'practise_testcase_management_q6': '6.6 Do you use a tool for test case management? (JIRA as example)',
        'practise_testcase_management_q7': '6.7 Do you manage requirements and test cases in one OR integrated tool?',
        'practise_testcase_management_q8': '6.8 Are your test cases traceable/linked to your requirements?',
        'practise_testcase_management_q9': '6.9 Do you cover All requirements with the test cases?',
        // 'practise_testcase_management_q9': '6.9 What is % of the requirements covered with the test cases?',
        'practise_testcase_management_q10': '6.10 Do you have test suites defined by testing priorities (e.g. Smoke Test, Regression Test)?',
        'practise_testcase_management_q11': '6.11 Do you use Gherkin language for documenting test cases? (Behaviour-Driven Development)',
        'practise_testcase_management_q12': '6.12 Do you include test cases bases on leaked defects into Regression suite?',

        'practise_defect_management_q1': '7.1 Do you have defect management policy defined that you follow?',
        'practise_defect_management_q2': '7.2 Do you have defect submission rules that you follow?',
        'practise_defect_management_q3': '7.3 Do you have defect severity definitions?',
        'practise_defect_management_q4': '7.4 Do you have defect priority?',
        'practise_defect_management_q5': '7.5 Do you use bug tracking system to log defects?',
        'practise_defect_management_q6': '7.6 Are registered defects easily traced to test case and requirement?',
        'practise_defect_management_q7': '7.7 Do you measure % of open defects comparing to all defects within last 3 iteration?',
        'practise_defect_management_q8': '7.8 Do you track, analyse and fix with high priority defects leaked to the Production?',
        // 'practise_defect_management_q9': '7.9 What is % of manual effort during pre-release testing cycle?',
        // 'practise_defect_management_q10': '7.10 What is % of defects leaked to the Production comparing to all defects?',

        'practise_integration_q1': '8.1 How often (in average) do you merge code into trunk/master/main/develop?',
        'practise_integration_q2': '8.2 How often do you merge code from trunk/master/main/develop to your feature branch?',
        'practise_integration_q3': '8.3 Do you have continuous integration server/tool?',
        'practise_integration_q4': '8.4 Is a step of build production integrated to CI pipeline and executed by commit/merge?',
        'practise_integration_q5': '8.5 How long does a step of build production take?',
        'practise_integration_q6': '8.6 Do you have a release/build repository allowing you to reproduce bugs of previous version?',
        'practise_integration_q7': '8.7 Does your CI pipeline includes a step of copying a builds in a special repository?',
        'practise_integration_q8': '8.8 Can you trace all your production build and release candidate builds to the source code revision?',
        'practise_integration_q9': '8.9 Are you keeping your main branch in "green" state',
        'practise_integration_q10': '8.10 Not green state is a blocker for you to continue work?',
        'practise_integration_q11': '8.11 Does your build process have pre-commit validation in order to keep repository source code valid?',
        'practise_integration_q12': '8.12 Have you integrated and use static analysis tool and its thresholds with continuous integration tool?',

        'practise_deployment_q1': '9.1 Is application deployment automated and can be done via "single click"?',
        'practise_deployment_q2': '9.2 Is automated deployment integrated with CI and can be run unattended? ',
        'practise_deployment_q3': '9.3 How often deployment (on the last possible environment) is executed?',
        'practise_deployment_q4': '9.4 Do you have automatic rollback if deliverable after deployment doesn\'t work?',
        'practise_deployment_q5': '9.5 What environment are covered by automated deployment process?',
        'practise_deployment_q6': '9.6 Have you specified production/runtime environment requirements?',
        'practise_deployment_q7': '9.7 Do you have deployment guide/script? (for Prod)',
        'practise_deployment_q8': '9.8 Do you have build configuration tool?',
        'practise_deployment_q9': '9.9 Do you have any toolset to perform automatic environment deployment and you apply it in your continuous deployment process?',

        'practise_release_strategy_q1': '10.1 How often do you release into Production?',
        'practise_release_strategy_q2': '10.2 How fast can you have a new version of a shippable product?',
        'practise_release_strategy_q3': '10.3 Do you have any rules of release versioning and branching?',
        'practise_release_strategy_q4': '10.4 Do you have Test Strategy defined that you follow?',
        'practise_release_strategy_q5': '10.5 Do you have a recovery strategy to rollback any previous build?',
        'practise_release_strategy_q6': '10.6 Do you have a defined approach how to rollback builds from the Production?',
        'practise_release_strategy_q7': '10.7 What testing do you execute for every release?',
        'practise_release_strategy_q8': '10.8 What testing do you execute for every hot-fix?',
        'practise_release_strategy_q9': '10.9 How many different environments do you have?',
        'practise_release_strategy_q10': '10.10 How do you create environments?',
        'practise_release_strategy_q11': '10.11 In which environment do you execute final testing?',
        'practise_release_strategy_q12': '10.12 Does you Test Data for final testing is the same or almost the same to that of Production?',
        'practise_release_strategy_q13': '10.13 How often do you prepare test data from Production environment?',
        'practise_release_strategy_q14': '10.14 Which of your environments are equal (in terms of functionality and performance) to the Prod configuration?',
        'practise_release_strategy_q15': '10.15 Do you have a notification strategy/policy/framework for your release process?',
        'practise_release_strategy_q16': '10.16 Do you aware and apply change management process in project?',

        'practise_requirements_q1': '11.1 Do you have definition of done?',
        'practise_requirements_q2': '11.2 Do you have Release Ready rules documented?',
        'practise_requirements_q3': '11.3 Do your requirements have acceptance criteria (testable)?',
        'practise_requirements_q4': '11.4 Do you have definition of ready?',
        'practise_requirements_q5': '11.5 Do you use a tool for Requirements Management? (JIRA count)',
        'practise_requirements_q6': '11.6 Do you involve PO (requirements stakeholders) to early feature acceptance?',
        'practise_requirements_q7': '11.7 Does QA review requirements before implementation?',
 
        'practise_docs_logs_q1': '12.1 Does your application log all events/exceptions/errors?',
        'practise_docs_logs_q2': '12.2 Are you using special tools to investigate issues and analyze logs?',
        'practise_docs_logs_q3': '12.3 Do you use tools to analyze application usage? ',
        'practise_docs_logs_q4': '12.4 Does your application have any support interfaces or API to show status indicators for load or performance?',
        'practise_docs_logs_q5': '12.5 Do you have environment monitoring alerting of KPI degradation?',
        'practise_docs_logs_q6': '12.6 Do you have any architecture document? ',
        'practise_docs_logs_q7': '12.7 Can you trace requirements to the component(s) implementing them?',
        'practise_docs_logs_q8': '12.8 Do you keep architecture document(s) up to date?',
        'practise_docs_logs_q9': '12.9 Do you have list of documented architecture significant requirements?',
        'practise_docs_logs_q10': '12.10 Do you have technical non functional requirements?',

        'practise_non_functional_q1': '13.1 Have you automated performance test execution?',
        'practise_non_functional_q2': '13.2 Is Performance test automation integrated with Build/Deploy process?',
        'practise_non_functional_q3': '13.3 Do you have an automatic reporting for Performance test automation?',
        'practise_non_functional_q4': '13.4 Have you automated stress test execution? ',
        'practise_non_functional_q5': '13.5 Is stress test automation integrated with Build/Deploy process?',
        'practise_non_functional_q6': '13.6 Do you have an automatic reporting for stress test automation?',
        'practise_non_functional_q7': '13.7 Do you have security test execution?',
        'practise_non_functional_q8': '13.8 Is security test automation integrated with Build/Deploy process?',
        'practise_non_functional_q9': '13.9 Do you have an automatic reporting for security test automation?',

        'practise_sap_q1': '14.1 Do you have eCATT + CBTA solutions in place?',
        'practise_sap_q2': '14.2 How do you trigger the eCATT + CBTA solutions?',
        'practise_sap_q3': '14.3 Do you measure test case coverage for your eCATT + CBTA solutions?',
        'practise_sap_q4': '14.4 Do you have Smoke Tests and is it documented?',
        'practise_sap_q5': '14.5 Is Smoke Test automated (% of automated tests)?',
        'practise_sap_q6': '14.6 How the smoke test is triggered?',
        'practise_sap_q7': '14.7 What is Smoke tests execution time for AUTOMATED tests?',
        'practise_sap_q8': '14.8 Do you have flickering results in your Automated Smoke Tests?',
        'practise_sap_q9': '14.9 Do you have automated Integration tests?',
        'practise_sap_q10': '14.10 Do you integrate automated Integration tests in CI pipeline ?',
        'practise_sap_q11': '14.11 Do you execute automated Integration tests right after each deployment on CI environment?',
        'practise_sap_q12': '14.12 Do you track automated Integration tests coverage (by methods, services covered)?',
        'practise_sap_q13': '14.13 Do you have Automated Regression Testing (suites) on system-integration level?',
        'practise_sap_q14': '14.14 How often do you execute Regression Tests?',
        'practise_sap_q15': '14.15 What is the percentage of Automated Regression Tests?',
        'practise_sap_q16': '14.16 Do you track automated Regression Test coverage by business cases / requirements?',
        'practise_sap_q17': '14.17 What is Regression Test execution time for Automated tests?',

        'practise_monitoring_q1': '15.1 Do you monitor application instances (processes, nodes, services(windows))?',
        'practise_monitoring_q2': '15.2 Is system automatically monitoring filesystem and resources (CPU, RAM, log files, etc.)?',
        'practise_monitoring_q3': '15.3 Are you monitoring database (e.g. listener, table spaces, schemas, users, process)?',
        'practise_monitoring_q4': '15.4 How do you assure connectivity to partner systems (middleware, network)?',
        'practise_monitoring_q5': '15.5 Is there E2E technical conectivity check between aplication and infrastructure components for instance via TITAN?',
        'practise_monitoring_q6': '15.6 Do we check various user roles? [end user, admin, sales]',
        'practise_monitoring_q7': '15.7 Are you monitoring reachability of FE?',
        'practise_monitoring_q8': '15.8 Are you checking login process (smoke test)?',

        'practise_operation_q1': '16.1 What is the future of application?',
        'practise_operation_q2': '16.2 Do you use containers for deployment?',
        'practise_operation_q3': '16.3 Do you auto built? (with e.g. Git)',
        'practise_operation_q4': '16.4 Do you auto deploy?',
        'practise_operation_q5': '16.5 What tools do you use for auto deploy and auto build?',
        'practise_operation_q6': '16.6 If you do not auto deploy then how do you handle your deployment?',
        'practise_operation_q7': '16.7 Where are deployments packaged delivered?',
        'practise_operation_q8': '16.8 Are downloading of packages automated?',
        'practise_operation_q9': '16.9 Are backup of application performed before deployment?',
        'practise_operation_q10': '16.10 Are pre-install backups automated?',
        'practise_operation_q11': '16.11 Are some tasks performed before deployment?',
        'practise_operation_q12': '16.12 Are pre-install tasks automated?',
        'practise_operation_q13': '16.13 Are any checks performed after deployment?',
        'practise_operation_q14': '16.14 Are post installation checks automated?',
        'practise_operation_q15': '16.15 Are any business checks performed after deployment?',
        'practise_operation_q16': '16.16 Are business checks automated?',
        'practise_operation_q17': '16.17 Is rollback automated?',
        'practise_operation_q18': '16.18 If rollback is not automated what alternatives you use?',
        'practise_operation_q19': '16.19 Do you have front-end (website)?',
        'practise_operation_q20': '16.20 Is application started automatically after crash (server failure)?',
        'practise_operation_q21': '16.21 Does it make sense automation for starting or stopping application? (via script, etc.)',
        'practise_operation_q22': '16.22 Do you have start/stop script on application?',
        'practise_operation_q23': '16.23 How many scripts do you have for start or stop of application (e.g. 3,2)',
        'practise_operation_q24': '16.24 Is User Management automated?',
        'practise_operation_q25': '16.25 Is application using certificates?',
        'practise_operation_q26': '16.26 Are you controlling lifecycle certificate management on HUB level?',
        'practise_operation_q27': '16.27 Are you notified about expiration of certificated via?',
        'practise_operation_q28': '16.28 Is renewing of certificate done automatically?',
        'practise_operation_q29': '16.29 Is application processing GDPR (personal data)',
        'practise_operation_q30': '16.30 How GDPR tasks are performed?',
        'practise_operation_q31': '16.31 Is queing and buffering used (e.g via SOA, que manager, etc.) to optimized communication with partner systems? ',
        'practise_operation_q32': '16.32 Does your current environment support automation (Docker containerization)?',

        'practise_exploration_q1': '17.1 Hypothesizing entails expressing a business idea (or epic) in terms of the business value it is expected to deliver. This hypothesis is then implemented as a Minimum Viable Product (MVP) through the Continuous Delivery Pipeline and evaluated for accuracy when released. Rate your team’s ability to translate business ideas into hypothesis statements that are clear and measurable.',
        'practise_exploration_q2': '17.2 Architecting for continuous delivery involves applying "just enough" intentional architecture to assure policy compliance without sacrificing product development flow, to ensure solutions are loosely coupled, and to continuously pay down technical debt. Rate your teams effectiveness at architecting for continuous delivery.',
        'practise_exploration_q3': '17.3 Collaborate and Research involves Product Management working directly with end-users, stakeholders, and subject matter experts to understand customers needs. Product Management also identifies specific business outcomes and associated metrics to guide solution delivery. Rate your teams ability to collaborate with customer experts and IT experts to define Minimum Marketable Features (MMF) in support of the hypothesis.',
        'practise_exploration_q4': '17.4 Synthesizing involves combining the outputs of Hypothesize, Collaborate & Research and Architect to produce well-formed, prioritized features. These features then become the primary vehicle of value delivery through the remainder of the Continuous Delivery Pipeline. Rate your teams ability to synthesize the results of Continuous Exploration activities into a well-crafted, prioritized, actionable feature backlog.',
        'practise_exploration_q5': '17.5 Build is triggered at the moment of check-in and involves compiling, unit testing (and other forms of component-level validation), successfully merging to trunk/main, committing to the repository, and producing deploy-able artifacts. Rate your teams effectiveness at building and integrating continuously',
        'practise_exploration_q6': '17.6 Developing in the Continuous Delivery Pipeline involves splitting features into stories, implementing stories in vertical slices using Test-Driven Development (TDD), and committing changes to version control as they are made. Rate your teams ability to quickly and reliably define and implement stories.',
        'practise_exploration_q7': '17.7 Staging involves deploying features to a full copy of the production environment, from where they can be demonstrated to stakeholders, user acceptance tested and hosted for training purposes prior to production launch. Rate your teams ability to stage features in full production-like (non-test) environments for final validation prior to production deployment.',
        'practise_exploration_q8': '17.8 Testing involves validating feature-level functionality in production-like environments.  End-to-end testing typically includes functional testing, integration testing, regression testing, performance testing and exploratory testing. Rate your teams effectiveness at testing continuously, end-to-end in production-like environments.',

        'practise_release_on_demand_q1': '18.1 Learning entails making a judgment call to validate or invalidate the original hypothesis based on objective measures of business value, system performance and customer feedback. Please rate your team\'s ability to make strategic, pivot-or-persevere decisions based on empirical performance data and commitment to actively applying those insights to continuously improve the pipeline.',
        'practise_release_on_demand_q2': '18.2 Measurement involves collecting factual information about the value of a deployed feature and evaluating it against the original hypothesis statement. Rate your team\'s ability to collect objective information about the actual value realized by deployed features so that it can inform strategic financial decisions.',
        'practise_release_on_demand_q3': '18.3 Releasing involves making deployed features available to end users. Rate your team\'s ability to release features to users on demand using feature toggles, blue/green environments, canary releases, and so on.',
        'practise_release_on_demand_q4': '18.4 The Continuous Delivery Pipeline requires the production environment to be continually stable, reliable, available, supportable and secure. Rate your team\'s effectiveness at maintaining stable solutions that avoid unplanned down time and security breaches.',

        'practise_robotics_q1': '19.1. Do you have automated processes where you use advanced analytics and algorithms (Artificial intelligence), such as chatbots, voicebots...?',
        'practise_robotics_q2': '19.2. Do you have automated processes within your Hub (using RPA or other automating tools)?',
        'practise_robotics_q3': '19.3. Do you have identified processes, which could be automized?',
        'practise_robotics_q4': '19.4. How many robots/automated processes is running within your Hub (using RPA or other automating tools)',
        'practise_robotics_q5': '19.5. In which area do you see potential for automation within your hub? Please describe more in detail.',
        'practise_robotics_q6': '19.6. When you are implementing process automation (RPA), which approach do you use?',

        'practise_safe_integration_q1': '20.1 Build is triggered at the moment of check-in and involves compiling, unit testing (and other forms of component-level validation), successfully merging to trunk/main, committing to the repository, and producing deploy-able artifacts. Rate your team\'s effectiveness at building and integrating continuously',
        'practise_safe_integration_q2': '20.2 Developing in the Continuous Delivery Pipeline involves splitting features into stories, implementing stories in vertical slices using Test-Driven Development (TDD), and committing changes to version control as they are made. Rate your team\'s ability to quickly and reliably define and implement stories.',
        'practise_safe_integration_q3': '20.2 Staging involves deploying features to a full copy of the production environment, from where they can be demonstrated to stakeholders, user acceptance tested and hosted for training purposes prior to production launch. Rate your team\'s ability to stage features in full production-like (non-test) environments for final validation prior to production deployment.',
        'practise_safe_integration_q4': '20.3 Testing involves validating feature-level functionality in production-like environments.  End-to-end testing typically includes functional testing, integration testing, regression testing, performance testing and exploratory testing. Rate your team\'s effectiveness at testing continuously, end-to-end in production-like environments.',

        'practise_safe_deployment_q1': '21.1 Deployment is the actual migration of features into the production environment. Because the Continuous Delivery Pipeline separates deployment from release, deployed features are not assumed to be live to end users. Rate your team\'s ability to continuously deploy features to production as well as the ability to control their visibility using feature toggles and/or other means.',
        'practise_safe_deployment_q2': '21.2 Monitoring implies that full-stack telemetry is active for all features deployed through the Continuous Delivery Pipeline so that system performance, end-user behavior, incidents and business value can be determined quickly and accurately in production. Rate your team\'s effectiveness at monitoring the full solution stack and ability to analyze feature value based on these events.',
        'practise_safe_deployment_q3': '21.3 Responding to unforeseen production incidents is critical to the Continuous Delivery Pipeline. Rate your team\'s effectiveness at proactively detecting high severity production issues, identifying root causes using monitoring systems and quickly resolving issues by building, testing and deploying fixes through the pipeline (versus applying changes directly in production).',
        'practise_safe_deployment_q4': '21.4 Deployments must be verified for completeness and integrity before releasing to end users. Rate your team\'s ability to accurately determine deployment success or failure and ability to roll back or fix forward as appropriate to correct deployment issues.',

    },
    // Russian
    'ru': {
        'practise_automation_q1': '1.1 Следуете ли вы принципам пирамиды тестирования в автоматизации?',
        'practise_automation_q2': '1.2 Разбиты ли ваши автоматические тесты на тест кейзы?',
        'practise_automation_q3': '1.3 Выполняются ли автоматические тесты в среде в независимой то ручных тестов?',
        'practise_automation_q4': '1.4 Выши автоматические тесты независимы друг от друга?',
        'practise_automation_q5': '1.5 Подготавливаете ли вы тестовые данные для новой среды для автоматизации тестирования?',
        'practise_automation_q6': '1.6 Есть ли у вас стратегия по предотвращению повторного открытия дефектов?',
        'practise_automation_q7': '1.7 Просматриваете и анализируете ли вы отчеты оn неудачных запусков авто тестов?',

        'practise_unit_test_q1': '2.1 Do you have unit tests?',
        'practise_unit_test_q2': '2.2 Do you execute Unit tests in CI in Pre-commit, post-commit and merge?',
        'practise_unit_test_q3': '2.3 Do you measure code coverage for unit tests?',
        'practise_unit_test_q4': '2.4 Do you have a unit test coverage target?',
        'practise_unit_test_q5': '2.5 Are your Unit Test targets met across all the components?',
        'practise_unit_test_q6': '2.6 Have you integrated unit test code coverage with a continuous integration tool and IDE?',
        'practise_unit_test_q7': '2.7 Do you use Test-driven development (TDD)?',

        'practise_component_test_q1': '3.1 Do you have automated Component tests?',
        'practise_component_test_q2': '3.2 Do you integrate automated Component tests in CI pipeline?',
        'practise_component_test_q3': '3.3 Do you track Component tests coverage (by methods, services covered)?',
        'practise_component_test_q4': '3.4 Do you have automated Integration tests?',
        'practise_component_test_q5': '3.5 Do you integrate automated Integration tests in CI pipeline?',
        'practise_component_test_q6': '3.6 Do you execute Integration tests right after each deployment on CI environment?',
        'practise_component_test_q7': '3.7 Do you track Integration tests coverage (by methods, services covered)?',
        'practise_component_test_q8': '3.8 Do you use Mocks or Simulator with Component or Integration tests?',

        // smokeregression
        'practise_smokeregression_q1': '4.1 Do you have Smoke Tests and is it documented?',
        'practise_smokeregression_q2': '4.2 Is Smoke Test automated (% of automated tests)?',
        'practise_smokeregression_q3': '4.3 Is Smoke Test integrated into CI and executed?',
        'practise_smokeregression_q4': '4.4 What is Smoke tests execution time for AUTOMATED tests?',
        'practise_smokeregression_q5': '4.5 Do you have flickering results in your Automated Smoke Tests?',
        'practise_smokeregression_q6': '4.6 Do you have Regression Testing (suites) on system-integration level?',
        'practise_smokeregression_q7': '4.7 How often do you execute Regression Tests?',
        'practise_smokeregression_q8': '4.8 What is the percentage of Automated Regression Tests?',
        'practise_smokeregression_q9': '4.9 Do you track automated Regression Test coverage by business cases / requirements?',
        'practise_smokeregression_q10': '4.10 What is Regression Test execution time for Automated tests?',

        'practise_code_quality_q1': '5.1 Do you have style guides and standards?',
        'practise_code_quality_q2': '5.2 Do you use style checker tool in IDE?',
        'practise_code_quality_q3': '5.3 Do you use dependency management tool? ',
        'practise_code_quality_q4': '5.4 Do you practice peer code review?',
        'practise_code_quality_q5': '5.5 Do you have Code Reviewers assignment strategy? ',
        'practise_code_quality_q6': '5.6 Do you have a professional tool for code review?',
        'practise_code_quality_q7': '5.7 Do have code review check list?',
        'practise_code_quality_q8': '5.8 Do you use static code analysis tools?',
        'practise_code_quality_q9': '5.9 Do you use pre-commit code review?',

        'practise_testcase_management_q1': '6.1 Do you document test cases?',
        'practise_testcase_management_q2': '6.2 Do you base test cases creation not only on requirements? ',
        'practise_testcase_management_q3': '6.3 Do you create test cases based on defects analysis?',
        'practise_testcase_management_q4': '6.4 Do you prioritize test cases?',
        'practise_testcase_management_q5': '6.5 Do you have practice of test case review (like code review)?',
        'practise_testcase_management_q6': '6.6 Do you use a tool for test case management? (JIRA as example)',
        'practise_testcase_management_q7': '6.7 Do you manage requirements and test cases in one OR integrated tool?',
        'practise_testcase_management_q8': '6.8 Are your test cases traceable/linked to your requirements?',
        'practise_testcase_management_q9': '6.9 Do you cover All requirements with the test cases?',
        // 'practise_testcase_management_q9': '6.9 What is % of the requirements covered with the test cases?',
        'practise_testcase_management_q10': '6.10 Do you have test suites defined by testing priorities (e.g. Smoke Test, Regression Test)?',
        'practise_testcase_management_q11': '6.11 Do you use Gherkin language for documenting test cases? (Behaviour-Driven Development)',
        'practise_testcase_management_q12': '6.12 Do you include test cases bases on leaked defects into Regression suite?',

        'practise_defect_management_q1': '7.1 Do you have defect management policy defined that you follow?',
        'practise_defect_management_q2': '7.2 Do you have defect submission rules that you follow?',
        'practise_defect_management_q3': '7.3 Do you have defect severity definitions?',
        'practise_defect_management_q4': '7.4 Do you have defect priority?',
        'practise_defect_management_q5': '7.5 Do you use bug tracking system to log defects?',
        'practise_defect_management_q6': '7.6 Are registered defects easily traced to test case and requirement?',
        'practise_defect_management_q7': '7.7 Do you measure % of open defects comparing to all defects within last 3 iteration?',
        'practise_defect_management_q8': '7.8 Do you track, analyse and fix with high priority defects leaked to the Production?',
        // 'practise_defect_management_q9': '7.9 What is % of manual effort during pre-release testing cycle?',
        // 'practise_defect_management_q10': '7.10 What is % of defects leaked to the Production comparing to all defects?',

        'practise_integration_q1': '8.1 How often (in average) do you merge code into trunk/master/main/develop?',
        'practise_integration_q2': '8.2 How often do you merge code from trunk/master/main/develop to your feature branch?',
        'practise_integration_q3': '8.3 Do you have continuous integration server/tool?',
        'practise_integration_q4': '8.4 Is a step of build production integrated to CI pipeline and executed by commit/merge?',
        'practise_integration_q5': '8.5 How long does a step of build production take?',
        'practise_integration_q6': '8.6 Do you have a release/build repository allowing you to reproduce bugs of previous version?',
        'practise_integration_q7': '8.7 Does your CI pipeline includes a step of copying a builds in a special repository?',
        'practise_integration_q8': '8.8 Can you trace all your production build and release candidate builds to the source code revision?',
        'practise_integration_q9': '8.9 Are you keeping your main branch in "green" state',
        'practise_integration_q10': '8.10 Not green state is a blocker for you to continue work?',
        'practise_integration_q11': '8.11 Does your build process have pre-commit validation in order to keep repository source code valid?',
        'practise_integration_q12': '8.12 Have you integrated and use static analysis tool and its thresholds with continuous integration tool?',

        'practise_deployment_q1': '9.1 Is application deployment automated and can be done via "single click"?',
        'practise_deployment_q2': '9.2 Is automated deployment integrated with CI and can be run unattended? ',
        'practise_deployment_q3': '9.3 How often deployment (on the last possible environment) is executed?',
        'practise_deployment_q4': '9.4 Do you have automatic rollback if deliverable after deployment doesn\'t work?',
        'practise_deployment_q5': '9.5 What environment are covered by automated deployment process?',
        'practise_deployment_q6': '9.6 Have you specified production/runtime environment requirements?',
        'practise_deployment_q7': '9.7 Do you have deployment guide/script? (for Prod)',
        'practise_deployment_q8': '9.8 Do you have build configuration tool?',
        'practise_deployment_q9': '9.9 Do you have any toolset to perform automatic environment deployment and you apply it in your continuous deployment process?',

        'practise_release_strategy_q1': '10.1 How often do you release into Production?',
        'practise_release_strategy_q2': '10.2 How fast can you have a new version of a shippable product?',
        'practise_release_strategy_q3': '10.3 Do you have any rules of release versioning and branching?',
        'practise_release_strategy_q4': '10.4 Do you have Test Strategy defined that you follow?',
        'practise_release_strategy_q5': '10.5 Do you have a recovery strategy to rollback any previous build?',
        'practise_release_strategy_q6': '10.6 Do you have a defined approach how to rollback builds from the Production?',
        'practise_release_strategy_q7': '10.7 What testing do you execute for every release?',
        'practise_release_strategy_q8': '10.8 What testing do you execute for every hot-fix?',
        'practise_release_strategy_q9': '10.9 How many different environments do you have?',
        'practise_release_strategy_q10': '10.10 How do you create environments?',
        'practise_release_strategy_q11': '10.11 In which environment do you execute final testing?',
        'practise_release_strategy_q12': '10.12 Does you Test Data for final testing is the same or almost the same to that of Production?',
        'practise_release_strategy_q13': '10.13 How often do you prepare test data from Production environment?',
        'practise_release_strategy_q14': '10.14 Which of your environments are equal (in terms of functionality and performance) to the Prod configuration?',
        'practise_release_strategy_q15': '10.15 Do you have a notification strategy/policy/framework for your release process?',
        'practise_release_strategy_q16': '10.16 Do you aware and apply change management process in project?',

        'practise_requirements_q1': '11.1 Do you have definition of done?',
        'practise_requirements_q2': '11.2 Do you have Release Ready rules documented?',
        'practise_requirements_q3': '11.3 Do your requirements have acceptance criteria (testable)?',
        'practise_requirements_q4': '11.4 Do you have definition of ready?',
        'practise_requirements_q5': '11.5 Do you use a tool for Requirements Management? (JIRA count)',
        'practise_requirements_q6': '11.6 Do you involve PO (requirements stakeholders) to early feature acceptance?',
        'practise_requirements_q7': '11.7 Does QA review requirements before implementation?',
 
        'practise_docs_logs_q1': '12.1 Does your application log all events/exceptions/errors?',
        'practise_docs_logs_q2': '12.2 Are you using special tools to investigate issues and analyze logs?',
        'practise_docs_logs_q3': '12.3 Do you use tools to analyze application usage? ',
        'practise_docs_logs_q4': '12.4 Does your application have any support interfaces or API to show status indicators for load or performance?',
        'practise_docs_logs_q5': '12.5 Do you have environment monitoring alerting of KPI degradation?',
        'practise_docs_logs_q6': '12.6 Do you have any architecture document? ',
        'practise_docs_logs_q7': '12.7 Can you trace requirements to the component(s) implementing them?',
        'practise_docs_logs_q8': '12.8 Do you keep architecture document(s) up to date?',
        'practise_docs_logs_q9': '12.9 Do you have list of documented architecture significant requirements?',
        'practise_docs_logs_q10': '12.10 Do you have technical non functional requirements?',

        'practise_non_functional_q1': '13.1 Have you automated performance test execution?',
        'practise_non_functional_q2': '13.2 Is Performance test automation integrated with Build/Deploy process?',
        'practise_non_functional_q3': '13.3 Do you have an automatic reporting for Performance test automation?',
        'practise_non_functional_q4': '13.4 Have you automated stress test execution? ',
        'practise_non_functional_q5': '13.5 Is stress test automation integrated with Build/Deploy process?',
        'practise_non_functional_q6': '13.6 Do you have an automatic reporting for stress test automation?',
        'practise_non_functional_q7': '13.7 Do you have security test execution?',
        'practise_non_functional_q8': '13.8 Is security test automation integrated with Build/Deploy process?',
        'practise_non_functional_q9': '13.9 Do you have an automatic reporting for security test automation?',

        'practise_sap_q1': '14.1 Do you have eCATT + CBTA solutions in place?',
        'practise_sap_q2': '14.2 How do you trigger the eCATT + CBTA solutions?',
        'practise_sap_q3': '14.3 Do you measure test case coverage for your eCATT + CBTA solutions?',
        'practise_sap_q4': '14.4 Do you have Smoke Tests and is it documented?',
        'practise_sap_q5': '14.5 Is Smoke Test automated (% of automated tests)?',
        'practise_sap_q6': '14.6 How the smoke test is triggered?',
        'practise_sap_q7': '14.7 What is Smoke tests execution time for AUTOMATED tests?',
        'practise_sap_q8': '14.8 Do you have flickering results in your Automated Smoke Tests?',
        'practise_sap_q9': '14.9 Do you have automated Integration tests?',
        'practise_sap_q10': '14.10 Do you integrate automated Integration tests in CI pipeline ?',
        'practise_sap_q11': '14.11 Do you execute automated Integration tests right after each deployment on CI environment?',
        'practise_sap_q12': '14.12 Do you track automated Integration tests coverage (by methods, services covered)?',
        'practise_sap_q13': '14.13 Do you have Automated Regression Testing (suites) on system-integration level?',
        'practise_sap_q14': '14.14 How often do you execute Regression Tests?',
        'practise_sap_q15': '14.15 What is the percentage of Automated Regression Tests?',
        'practise_sap_q16': '14.16 Do you track automated Regression Test coverage by business cases / requirements?',
        'practise_sap_q17': '14.17 What is Regression Test execution time for Automated tests?',

        'practise_monitoring_q1': '15.1 Do you monitor application instances (processes, nodes, services(windows))?',
        'practise_monitoring_q2': '15.2 Is system automatically monitoring filesystem and resources (CPU, RAM, log files, etc.)?',
        'practise_monitoring_q3': '15.3 Are you monitoring database (e.g. listener, table spaces, schemas, users, process)?',
        'practise_monitoring_q4': '15.4 How do you assure connectivity to partner systems (middleware, network)?',
        'practise_monitoring_q5': '15.5 Is there E2E technical conectivity check between aplication and infrastructure components for instance via TITAN?',
        'practise_monitoring_q6': '15.6 Do we check various user roles? [end user, admin, sales]',
        'practise_monitoring_q7': '15.7 Are you monitoring reachability of FE?',
        'practise_monitoring_q8': '15.8 Are you checking login process (smoke test)?',

        'practise_operation_q1': '16.1 What is the future of application?',
        'practise_operation_q2': '16.2 Do you use containers for deployment?',
        'practise_operation_q3': '16.3 Do you auto built? (with e.g. Git)',
        'practise_operation_q4': '16.4 Do you auto deploy?',
        'practise_operation_q5': '16.5 What tools do you use for auto deploy and auto build?',
        'practise_operation_q6': '16.6 If you do not auto deploy then how do you handle your deployment?',
        'practise_operation_q7': '16.7 Where are deployments packaged delivered?',
        'practise_operation_q8': '16.8 Are downloading of packages automated?',
        'practise_operation_q9': '16.9 Are backup of application performed before deployment?',
        'practise_operation_q10': '16.10 Are pre-install backups automated?',
        'practise_operation_q11': '16.11 Are some tasks performed before deployment?',
        'practise_operation_q12': '16.12 Are pre-install tasks automated?',
        'practise_operation_q13': '16.13 Are any checks performed after deployment?',
        'practise_operation_q14': '16.14 Are post installation checks automated?',
        'practise_operation_q15': '16.15 Are any business checks performed after deployment?',
        'practise_operation_q16': '16.16 Are business checks automated?',
        'practise_operation_q17': '16.17 Is rollback automated?',
        'practise_operation_q18': '16.18 If rollback is not automated what alternatives you use?',
        'practise_operation_q19': '16.19 Do you have front-end (website)?',
        'practise_operation_q20': '16.20 Is application started automatically after crash (server failure)?',
        'practise_operation_q21': '16.21 Does it make sense automation for starting or stopping application? (via script, etc.)',
        'practise_operation_q22': '16.22 Do you have start/stop script on application?',
        'practise_operation_q23': '16.23 How many scripts do you have for start or stop of application (e.g. 3,2)',
        'practise_operation_q24': '16.24 Is User Management automated?',
        'practise_operation_q25': '16.25 Is application using certificates?',
        'practise_operation_q26': '16.26 Are you controlling lifecycle certificate management on HUB level?',
        'practise_operation_q27': '16.27 Are you notified about expiration of certificated via?',
        'practise_operation_q28': '16.28 Is renewing of certificate done automatically?',
        'practise_operation_q29': '16.29 Is application processing GDPR (personal data)',
        'practise_operation_q30': '16.30 How GDPR tasks are performed?',
        'practise_operation_q31': '16.31 Is queing and buffering used (e.g via SOA, que manager, etc.) to optimized communication with partner systems? ',
        'practise_operation_q32': '16.32 Does your current environment support automation (Docker containerization)?',

        'practise_exploration_q1': '17.1 Hypothesizing entails expressing a business idea (or epic) in terms of the business value it is expected to deliver. This hypothesis is then implemented as a Minimum Viable Product (MVP) through the Continuous Delivery Pipeline and evaluated for accuracy when released. Rate your team’s ability to translate business ideas into hypothesis statements that are clear and measurable.',
        'practise_exploration_q2': '17.2 Architecting for continuous delivery involves applying "just enough" intentional architecture to assure policy compliance without sacrificing product development flow, to ensure solutions are loosely coupled, and to continuously pay down technical debt. Rate your teams effectiveness at architecting for continuous delivery.',
        'practise_exploration_q3': '17.3 Collaborate and Research involves Product Management working directly with end-users, stakeholders, and subject matter experts to understand customers needs. Product Management also identifies specific business outcomes and associated metrics to guide solution delivery. Rate your teams ability to collaborate with customer experts and IT experts to define Minimum Marketable Features (MMF) in support of the hypothesis.',
        'practise_exploration_q4': '17.4 Synthesizing involves combining the outputs of Hypothesize, Collaborate & Research and Architect to produce well-formed, prioritized features. These features then become the primary vehicle of value delivery through the remainder of the Continuous Delivery Pipeline. Rate your teams ability to synthesize the results of Continuous Exploration activities into a well-crafted, prioritized, actionable feature backlog.',
        'practise_exploration_q5': '17.5 Build is triggered at the moment of check-in and involves compiling, unit testing (and other forms of component-level validation), successfully merging to trunk/main, committing to the repository, and producing deploy-able artifacts. Rate your teams effectiveness at building and integrating continuously',
        'practise_exploration_q6': '17.6 Developing in the Continuous Delivery Pipeline involves splitting features into stories, implementing stories in vertical slices using Test-Driven Development (TDD), and committing changes to version control as they are made. Rate your teams ability to quickly and reliably define and implement stories.',
        'practise_exploration_q7': '17.7 Staging involves deploying features to a full copy of the production environment, from where they can be demonstrated to stakeholders, user acceptance tested and hosted for training purposes prior to production launch. Rate your teams ability to stage features in full production-like (non-test) environments for final validation prior to production deployment.',
        'practise_exploration_q8': '17.8 Testing involves validating feature-level functionality in production-like environments.  End-to-end testing typically includes functional testing, integration testing, regression testing, performance testing and exploratory testing. Rate your teams effectiveness at testing continuously, end-to-end in production-like environments.',

        'practise_release_on_demand_q1': '18.1 Learning entails making a judgment call to validate or invalidate the original hypothesis based on objective measures of business value, system performance and customer feedback. Please rate your team\'s ability to make strategic, pivot-or-persevere decisions based on empirical performance data and commitment to actively applying those insights to continuously improve the pipeline.',
        'practise_release_on_demand_q2': '18.2 Measurement involves collecting factual information about the value of a deployed feature and evaluating it against the original hypothesis statement. Rate your team\'s ability to collect objective information about the actual value realized by deployed features so that it can inform strategic financial decisions.',
        'practise_release_on_demand_q3': '18.3 Releasing involves making deployed features available to end users. Rate your team\'s ability to release features to users on demand using feature toggles, blue/green environments, canary releases, and so on.',
        'practise_release_on_demand_q4': '18.4 The Continuous Delivery Pipeline requires the production environment to be continually stable, reliable, available, supportable and secure. Rate your team\'s effectiveness at maintaining stable solutions that avoid unplanned down time and security breaches.',

        'practise_robotics_q1': '19.1. Do you have automated processes where you use advanced analytics and algorithms (Artificial intelligence), such as chatbots, voicebots...?',
        'practise_robotics_q2': '19.2. Do you have automated processes within your Hub (using RPA or other automating tools)?',
        'practise_robotics_q3': '19.3. Do you have indentified processes, which could be automized?',
        'practise_robotics_q4': '19.4. How many robots/automated processes is running within your Hub (using RPA or other automating tools)',
        'practise_robotics_q5': '19.5. In which area do you see potential for automation within your hub? Please describe more in detail.',
        'practise_robotics_q6': '19.6. When you are implementing process automation (RPA), which approach do you use?',

        'practise_safe_integration_q1': '20.1 Build is triggered at the moment of check-in and involves compiling, unit testing (and other forms of component-level validation), successfully merging to trunk/main, committing to the repository, and producing deploy-able artifacts. Rate your team\'s effectiveness at building and integrating continuously',
        'practise_safe_integration_q2': '20.2 Developing in the Continuous Delivery Pipeline involves splitting features into stories, implementing stories in vertical slices using Test-Driven Development (TDD), and committing changes to version control as they are made. Rate your team\'s ability to quickly and reliably define and implement stories.',
        'practise_safe_integration_q3': '20.2 Staging involves deploying features to a full copy of the production environment, from where they can be demonstrated to stakeholders, user acceptance tested and hosted for training purposes prior to production launch. Rate your team\'s ability to stage features in full production-like (non-test) environments for final validation prior to production deployment.',
        'practise_safe_integration_q4': '20.3 Testing involves validating feature-level functionality in production-like environments.  End-to-end testing typically includes functional testing, integration testing, regression testing, performance testing and exploratory testing. Rate your team\'s effectiveness at testing continuously, end-to-end in production-like environments.',

        'practise_safe_deployment_q1': '21.1 Deployment is the actual migration of features into the production environment. Because the Continuous Delivery Pipeline separates deployment from release, deployed features are not assumed to be live to end users. Rate your team\'s ability to continuously deploy features to production as well as the ability to control their visibility using feature toggles and/or other means.',
        'practise_safe_deployment_q2': '21.2 Monitoring implies that full-stack telemetry is active for all features deployed through the Continuous Delivery Pipeline so that system performance, end-user behavior, incidents and business value can be determined quickly and accurately in production. Rate your team\'s effectiveness at monitoring the full solution stack and ability to analyze feature value based on these events.',
        'practise_safe_deployment_q3': '21.3 Responding to unforeseen production incidents is critical to the Continuous Delivery Pipeline. Rate your team\'s effectiveness at proactively detecting high severity production issues, identifying root causes using monitoring systems and quickly resolving issues by building, testing and deploying fixes through the pipeline (versus applying changes directly in production).',
        'practise_safe_deployment_q4': '21.4 Deployments must be verified for completeness and integrity before releasing to end users. Rate your team\'s ability to accurately determine deployment success or failure and ability to roll back or fix forward as appropriate to correct deployment issues.',
    },
    // German
    'de' : {
        'practise_automation_q1': '1.1 Do you follow test automation pyramid principles to build test automation?',
        'practise_automation_q2': '1.2 Are your automated tests traceable to the test cases?',
        'practise_automation_q3': '1.3 Are automated tests executed in the environment isolated from manual testing?',
        'practise_automation_q4': '1.4 Are automated tests independent from each other?',
        'practise_automation_q5': '1.5 Do you prepare Test Data for new environment for test automation via backend calls?',
        'practise_automation_q6': '1.6 Do you have a strategy to prevent defect reopen? (for example automate tests development for found defects)',
        'practise_automation_q7': '1.7 Do you reviewed fail reports from auto tests?',

        'practise_unit_test_q1': '2.1 Do you have unit tests?',
        'practise_unit_test_q2': '2.2 Do you execute Unit tests in CI in Pre-commit, post-commit and merge?',
        'practise_unit_test_q3': '2.3 Do you measure code coverage for unit tests?',
        'practise_unit_test_q4': '2.4 Do you have a unit test coverage target?',
        'practise_unit_test_q5': '2.5 Are your unit targets met across all the components?',
        'practise_unit_test_q6': '2.6 Have you integrated unit test code coverage with a continuous integration tool and IDE?',
        'practise_unit_test_q7': '2.7 Do you use Test-driven development (TDD)?',

        'practise_component_test_q1': '3.1 Do you have automated Component tests?',
        'practise_component_test_q2': '3.2 Do you integrate automated Component tests in CI pipeline?',
        'practise_component_test_q3': '3.3 Do you track Component tests coverage (by methods, services covered)?',
        'practise_component_test_q4': '3.4 Do you have automated Integration tests?',
        'practise_component_test_q5': '3.5 Do you integrate automated Integration tests in CI pipeline?',
        'practise_component_test_q6': '3.6 Do you execute Integration tests right after each deployment on CI environment?',
        'practise_component_test_q7': '3.7 Do you track Integration tests coverage (by methods, services covered)?',
        'practise_component_test_q8': '3.8 Do you use Mocks or Simulator with Component or Integration tests?',

        // smokeregression
        'practise_smokeregression_q1': '4.1 Do you have Smoke Tests and is it documented?',
        'practise_smokeregression_q2': '4.2 Is Smoke Test automated (% of automated tests)?',
        'practise_smokeregression_q3': '4.3 Is Smoke Test integrated into CI and executed?',
        'practise_smokeregression_q4': '4.4 What is Smoke tests execution time for AUTOMATED tests?',
        'practise_smokeregression_q5': '4.5 Do you have flickering results in your Automated Smoke Tests?',
        'practise_smokeregression_q6': '4.6 Do you have Regression Testing (suites) on system-integration level?',
        'practise_smokeregression_q8': '4.7 How often do you execute Regression Tests?',
        'practise_smokeregression_q9': '4.8 What is the percentage of Automated Regression Tests?',
        'practise_smokeregression_q10': '4.9 Do you track automated Regression Test coverage by business cases / requirements?',
        'practise_smokeregression_q11': '4.10 What is Regression Test execution time for Automated tests?',

        'practise_code_quality_q1': '5.1 Do you have style guides and standards?',
        'practise_code_quality_q2': '5.2 Do you use style checker tool in IDE?',
        'practise_code_quality_q3': '5.3 Do you use dependency management tool? ',
        'practise_code_quality_q4': '5.4 Do you practice peer code review?',
        'practise_code_quality_q5': '5.5 Do you have Code Reviewers assignment strategy? ',
        'practise_code_quality_q6': '5.6 Do you have a professional tool for code review?',
        'practise_code_quality_q7': '5.7 Do have code review check list?',
        'practise_code_quality_q8': '5.8 Do you use static code analysis tools?',
        'practise_code_quality_q9': '5.9 Do you use pre-commit code review?',

        'practise_testcase_management_q1': '6.1 Do you document test cases?',
        'practise_testcase_management_q2': '6.2 Do you base test cases creation not only on requirements? ',
        'practise_testcase_management_q3': '6.3 Do you create test cases based on defects analysis?',
        'practise_testcase_management_q4': '6.4 Do you prioritize test cases?',
        'practise_testcase_management_q5': '6.5 Do you have practice of test case review (like code review)?',
        'practise_testcase_management_q6': '6.6 Do you use a tool for test case management? (JIRA as example)',
        'practise_testcase_management_q7': '6.7 Do you manage requirements and test cases in one OR integrated tool?',
        'practise_testcase_management_q8': '6.8 Are your test cases traceable/linked to your requirements?',
        'practise_testcase_management_q9': '6.9 Do you cover All requirements with the test cases?',
        // 'practise_testcase_management_q9': '6.9 What is % of the requirements covered with the test cases?',
        'practise_testcase_management_q10': '6.10 Do you have test suites defined by testing priorities (e.g. Smoke Test, Regression Test)?',
        'practise_testcase_management_q11': '6.11 Do you use Gherkin language for documenting test cases? (Behaviour-Driven Development)',
        'practise_testcase_management_q12': '6.12 Do you include test cases bases on leaked defects into Regression suite?',

        'practise_defect_management_q1': '7.1 Do you have defect management policy defined that you follow?',
        'practise_defect_management_q2': '7.2 Do you have defect submission rules that you follow?',
        'practise_defect_management_q3': '7.3 Do you have defect severity definitions?',
        'practise_defect_management_q4': '7.4 Do you have defect priority?',
        'practise_defect_management_q5': '7.5 Do you use bug tracking system to log defects?',
        'practise_defect_management_q6': '7.6 Are registered defects easily traced to test case and requirement?',
        'practise_defect_management_q7': '7.7 Do you measure % of open defects comparing to all defects within last 3 iteration?',
        'practise_defect_management_q8': '7.8 Do you track, analyse and fix with high priority defects leaked to the Production?',
        // 'practise_defect_management_q9': '7.9 What is % of manual effort during pre-release testing cycle?',
        // 'practise_defect_management_q10': '7.10 What is % of defects leaked to the Production comparing to all defects?',

        'practise_integration_q1': '8.1 How often (in average) do you merge code into trunk/master/main/develop?',
        'practise_integration_q2': '8.2 How often do you merge code from trunk/master/main/develop to your feature branch?',
        'practise_integration_q3': '8.3 Do you have continuous integration server/tool?',
        'practise_integration_q4': '8.4 Is a step of build production integrated to CI pipeline and executed by commit/merge?',
        'practise_integration_q5': '8.5 How long does a step of build production take?',
        'practise_integration_q6': '8.6 Do you have a release/build repository allowing you to reproduce bugs of previous version?',
        'practise_integration_q7': '8.7 Does your CI pipeline includes a step of copying a builds in a special repository?',
        'practise_integration_q8': '8.8 Can you trace all your production build and release candidate builds to the source code revision?',
        'practise_integration_q9': '8.9 Are you keeping your main branch in "green" state',
        'practise_integration_q10': '8.10 Not green state is a blocker for you to continue work?',
        'practise_integration_q11': '8.11 Does your build process have pre-commit validation in order to keep repository source code valid?',
        'practise_integration_q12': '8.12 Have you integrated and use static analysis tool and its thresholds with continuous integration tool?',

        'practise_deployment_q1': '9.1 Is application deployment automated and can be done via "single click"?',
        'practise_deployment_q2': '9.2 Is automated deployment integrated with CI and can be run unattended? ',
        'practise_deployment_q3': '9.3 How often deployment (on the last possible environment) is executed?',
        'practise_deployment_q4': '9.4 Do you have automatic rollback if deliverable after deployment doesn\'t work?',
        'practise_deployment_q5': '9.5 What environment are covered by automated deployment process?',
        'practise_deployment_q6': '9.6 Have you specified production/runtime environment requirements?',
        'practise_deployment_q7': '9.7 Do you have deployment guide/script? (for Prod)',
        'practise_deployment_q8': '9.8 Do you have build configuration tool?',
        'practise_deployment_q9': '9.9 Do you have any toolset to perform automatic environment deployment and you apply it in your continuous deployment process?',

        'practise_release_strategy_q1': '10.1 How often do you release into Production?',
        'practise_release_strategy_q2': '10.2 How fast can you have a new version of a shippable product?',
        'practise_release_strategy_q3': '10.3 Do you have any rules of release versioning and branching?',
        'practise_release_strategy_q4': '10.4 Do you have Test Strategy defined that you follow?',
        'practise_release_strategy_q5': '10.5 Do you have a recovery strategy to rollback any previous build?',
        'practise_release_strategy_q6': '10.6 Do you have a defined approach how to rollback builds from the Production?',
        'practise_release_strategy_q7': '10.7 What testing do you execute for every release?',
        'practise_release_strategy_q8': '10.8 What testing do you execute for every hot-fix?',
        'practise_release_strategy_q9': '10.9 How many different environments do you have?',
        'practise_release_strategy_q10': '10.10 How do you create environments?',
        'practise_release_strategy_q11': '10.11 In which environment do you execute final testing?',
        'practise_release_strategy_q12': '10.12 Does you Test Data for final testing is the same or almost the same to that of Production?',
        'practise_release_strategy_q13': '10.13 How often do you prepare test data from Production environment?',
        'practise_release_strategy_q14': '10.14 Which of your environments are equal (in terms of functionality and performance) to the Prod configuration?',
        'practise_release_strategy_q15': '10.15 Do you have a notification strategy/policy/framework for your release process?',
        'practise_release_strategy_q16': '10.16 Do you aware and apply change management process in project?',

        'practise_requirements_q1': '11.1 Do you have definition of done?',
        'practise_requirements_q2': '11.2 Do you have Release Ready rules documented?',
        'practise_requirements_q3': '11.3 Do your requirements have acceptance criteria (testable)?',
        'practise_requirements_q4': '11.4 Do you have definition of ready?',
        'practise_requirements_q5': '11.5 Do you use a tool for Requirements Management? (JIRA count)',
        'practise_requirements_q6': '11.6 Do you involve PO (requirements stakeholders) to early feature acceptance?',
        'practise_requirements_q7': '11.7 Does QA review requirements before implementation?',
 
        'practise_docs_logs_q1': '12.1 Does your application log all events/exceptions/errors?',
        'practise_docs_logs_q2': '12.2 Are you using special tools to investigate issues and analyze logs?',
        'practise_docs_logs_q3': '12.3 Do you use tools to analyze application usage? ',
        'practise_docs_logs_q4': '12.4 Does your application have any support interfaces or API to show status indicators for load or performance?',
        'practise_docs_logs_q5': '12.5 Do you have environment monitoring alerting of KPI degradation?',
        'practise_docs_logs_q6': '12.6 Do you have any architecture document? ',
        'practise_docs_logs_q7': '12.7 Can you trace requirements to the component(s) implementing them?',
        'practise_docs_logs_q8': '12.8 Do you keep architecture document(s) up to date?',
        'practise_docs_logs_q9': '12.9 Do you have list of documented architecture significant requirements?',
        'practise_docs_logs_q10': '12.10 Do you have technical non functional requirements?',

        'practise_non_functional_q1': '13.1 Have you automated performance test execution?',
        'practise_non_functional_q2': '13.2 Is Performance test automation integrated with Build/Deploy process?',
        'practise_non_functional_q3': '13.3 Do you have an automatic reporting for Performance test automation?',
        'practise_non_functional_q4': '13.4 Have you automated stress test execution? ',
        'practise_non_functional_q5': '13.5 Is stress test automation integrated with Build/Deploy process?',
        'practise_non_functional_q6': '13.6 Do you have an automatic reporting for stress test automation?',
        'practise_non_functional_q7': '13.7 Do you have security test execution?',
        'practise_non_functional_q8': '13.8 Is security test automation integrated with Build/Deploy process?',
        'practise_non_functional_q9': '13.9 Do you have an automatic reporting for security test automation?',

        'practise_sap_q1': '14.1 Do you have eCATT + CBTA solutions in place?',
        'practise_sap_q2': '14.2 How do you trigger the eCATT + CBTA solutions?',
        'practise_sap_q3': '14.3 Do you measure test case coverage for your eCATT + CBTA solutions?',
        'practise_sap_q4': '14.4 Do you have Smoke Tests and is it documented?',
        'practise_sap_q5': '14.5 Is Smoke Test automated (% of automated tests)?',
        'practise_sap_q6': '14.6 How the smoke test is triggered?',
        'practise_sap_q7': '14.7 What is Smoke tests execution time for AUTOMATED tests?',
        'practise_sap_q8': '14.8 Do you have flickering results in your Automated Smoke Tests?',
        'practise_sap_q9': '14.9 Do you have automated Integration tests?',
        'practise_sap_q10': '14.10 Do you integrate automated Integration tests in CI pipeline ?',
        'practise_sap_q11': '14.11 Do you execute automated Integration tests right after each deployment on CI environment?',
        'practise_sap_q12': '14.12 Do you track automated Integration tests coverage (by methods, services covered)?',
        'practise_sap_q13': '14.13 Do you have Automated Regression Testing (suites) on system-integration level?',
        'practise_sap_q14': '14.14 How often do you execute Regression Tests?',
        'practise_sap_q15': '14.15 What is the percentage of Automated Regression Tests?',
        'practise_sap_q16': '14.16 Do you track automated Regression Test coverage by business cases / requirements?',
        'practise_sap_q17': '14.17 What is Regression Test execution time for Automated tests?',

        'practise_monitoring_q1': '15.1 Do you monitor application instances (processes, nodes, services(windows))?',
        'practise_monitoring_q2': '15.2 Is system automatically monitoring filesystem and resources (CPU, RAM, log files, etc.)?',
        'practise_monitoring_q3': '15.3 Are you monitoring database (e.g. listener, table spaces, schemas, users, process)?',
        'practise_monitoring_q4': '15.4 How do you assure connectivity to partner systems (middleware, network)?',
        'practise_monitoring_q5': '15.5 Is there E2E technical conectivity check between aplication and infrastructure components for instance via TITAN?',
        'practise_monitoring_q6': '15.6 Do we check various user roles? [end user, admin, sales]',
        'practise_monitoring_q7': '15.7 Are you monitoring reachability of FE?',
        'practise_monitoring_q8': '15.8 Are you checking login process (smoke test)?',

        'practise_operation_q1': '16.1 What is the future of application?',
        'practise_operation_q2': '16.2 Do you use containers for deployment?',
        'practise_operation_q3': '16.3 Do you auto built? (with e.g. Git)',
        'practise_operation_q4': '16.4 Do you auto deploy?',
        'practise_operation_q5': '16.5 What tools do you use for auto deploy and auto build?',
        'practise_operation_q6': '16.6 If you do not auto deploy then how do you handle your deployment?',
        'practise_operation_q7': '16.7 Where are deployments packaged delivered?',
        'practise_operation_q8': '16.8 Are downloading of packages automated?',
        'practise_operation_q9': '16.9 Are backup of application performed before deployment?',
        'practise_operation_q10': '16.10 Are pre-install backups automated?',
        'practise_operation_q11': '16.11 Are some tasks performed before deployment?',
        'practise_operation_q12': '16.12 Are pre-install tasks automated?',
        'practise_operation_q13': '16.13 Are any checks performed after deployment?',
        'practise_operation_q14': '16.14 Are post installation checks automated?',
        'practise_operation_q15': '16.15 Are any business checks performed after deployment?',
        'practise_operation_q16': '16.16 Are business checks automated?',
        'practise_operation_q17': '16.17 Is rollback automated?',
        'practise_operation_q18': '16.18 If rollback is not automated what alternatives you use?',
        'practise_operation_q19': '16.19 Do you have front-end (website)?',
        'practise_operation_q20': '16.20 Is application started automatically after crash (server failure)?',
        'practise_operation_q21': '16.21 Does it make sense automation for starting or stopping application? (via script, etc.)',
        'practise_operation_q22': '16.22 Do you have start/stop script on application?',
        'practise_operation_q23': '16.23 How many scripts do you have for start or stop of application (e.g. 3,2)',
        'practise_operation_q24': '16.24 Is User Management automated?',
        'practise_operation_q25': '16.25 Is application using certificates?',
        'practise_operation_q26': '16.26 Are you controlling lifecycle certificate management on HUB level?',
        'practise_operation_q27': '16.27 Are you notified about expiration of certificated via?',
        'practise_operation_q28': '16.28 Is renewing of certificate done automatically?',
        'practise_operation_q29': '16.29 Is application processing GDPR (personal data)',
        'practise_operation_q30': '16.30 How GDPR tasks are performed?',
        'practise_operation_q31': '16.31 Is queing and buffering used (e.g via SOA, que manager, etc.) to optimized communication with partner systems? ',
        'practise_operation_q32': '16.32 Does your current environment support automation (Docker containerization)?',

        'practise_exploration_q1': '17.1 Hypothesizing entails expressing a business idea (or epic) in terms of the business value it is expected to deliver. This hypothesis is then implemented as a Minimum Viable Product (MVP) through the Continuous Delivery Pipeline and evaluated for accuracy when released. Rate your team’s ability to translate business ideas into hypothesis statements that are clear and measurable.',
        'practise_exploration_q2': '17.2 Architecting for continuous delivery involves applying "just enough" intentional architecture to assure policy compliance without sacrificing product development flow, to ensure solutions are loosely coupled, and to continuously pay down technical debt. Rate your teams effectiveness at architecting for continuous delivery.',
        'practise_exploration_q3': '17.3 Collaborate and Research involves Product Management working directly with end-users, stakeholders, and subject matter experts to understand customers needs. Product Management also identifies specific business outcomes and associated metrics to guide solution delivery. Rate your teams ability to collaborate with customer experts and IT experts to define Minimum Marketable Features (MMF) in support of the hypothesis.',
        'practise_exploration_q4': '17.4 Synthesizing involves combining the outputs of Hypothesize, Collaborate & Research and Architect to produce well-formed, prioritized features. These features then become the primary vehicle of value delivery through the remainder of the Continuous Delivery Pipeline. Rate your teams ability to synthesize the results of Continuous Exploration activities into a well-crafted, prioritized, actionable feature backlog.',
        'practise_exploration_q5': '17.5 Build is triggered at the moment of check-in and involves compiling, unit testing (and other forms of component-level validation), successfully merging to trunk/main, committing to the repository, and producing deploy-able artifacts. Rate your teams effectiveness at building and integrating continuously',
        'practise_exploration_q6': '17.6 Developing in the Continuous Delivery Pipeline involves splitting features into stories, implementing stories in vertical slices using Test-Driven Development (TDD), and committing changes to version control as they are made. Rate your teams ability to quickly and reliably define and implement stories.',
        'practise_exploration_q7': '17.7 Staging involves deploying features to a full copy of the production environment, from where they can be demonstrated to stakeholders, user acceptance tested and hosted for training purposes prior to production launch. Rate your teams ability to stage features in full production-like (non-test) environments for final validation prior to production deployment.',
        'practise_exploration_q8': '17.8 Testing involves validating feature-level functionality in production-like environments.  End-to-end testing typically includes functional testing, integration testing, regression testing, performance testing and exploratory testing. Rate your teams effectiveness at testing continuously, end-to-end in production-like environments.',

        'practise_release_on_demand_q1': '18.1 Learning entails making a judgment call to validate or invalidate the original hypothesis based on objective measures of business value, system performance and customer feedback. Please rate your team\'s ability to make strategic, pivot-or-persevere decisions based on empirical performance data and commitment to actively applying those insights to continuously improve the pipeline.',
        'practise_release_on_demand_q2': '18.2 Measurement involves collecting factual information about the value of a deployed feature and evaluating it against the original hypothesis statement. Rate your team\'s ability to collect objective information about the actual value realized by deployed features so that it can inform strategic financial decisions.',
        'practise_release_on_demand_q3': '18.3 Releasing involves making deployed features available to end users. Rate your team\'s ability to release features to users on demand using feature toggles, blue/green environments, canary releases, and so on.',
        'practise_release_on_demand_q4': '18.4 The Continuous Delivery Pipeline requires the production environment to be continually stable, reliable, available, supportable and secure. Rate your team\'s effectiveness at maintaining stable solutions that avoid unplanned down time and security breaches.',

        'practise_robotics_q1': '19.1. Do you have automated processes where you use advanced analytics and algorithms (Artificial intelligence), such as chatbots, voicebots...?',
        'practise_robotics_q2': '19.2. Do you have automated processes within your Hub (using RPA or other automating tools)?',
        'practise_robotics_q3': '19.3. Do you have indentified processes, which could be automized?',
        'practise_robotics_q4': '19.4. How many robots/automated processes is running within your Hub (using RPA or other automating tools)',
        'practise_robotics_q5': '19.5. In which area do you see potential for automation within your hub? Please describe more in detail.',
        'practise_robotics_q6': '19.6. When you are implementing process automation (RPA), which approach do you use?',

        'practise_safe_integration_q1': '20.1 Build is triggered at the moment of check-in and involves compiling, unit testing (and other forms of component-level validation), successfully merging to trunk/main, committing to the repository, and producing deploy-able artifacts. Rate your team\'s effectiveness at building and integrating continuously',
        'practise_safe_integration_q2': '20.2 Developing in the Continuous Delivery Pipeline involves splitting features into stories, implementing stories in vertical slices using Test-Driven Development (TDD), and committing changes to version control as they are made. Rate your team\'s ability to quickly and reliably define and implement stories.',
        'practise_safe_integration_q3': '20.2 Staging involves deploying features to a full copy of the production environment, from where they can be demonstrated to stakeholders, user acceptance tested and hosted for training purposes prior to production launch. Rate your team\'s ability to stage features in full production-like (non-test) environments for final validation prior to production deployment.',
        'practise_safe_integration_q4': '20.3 Testing involves validating feature-level functionality in production-like environments.  End-to-end testing typically includes functional testing, integration testing, regression testing, performance testing and exploratory testing. Rate your team\'s effectiveness at testing continuously, end-to-end in production-like environments.',

        'practise_safe_deployment_q1': '21.1 Deployment is the actual migration of features into the production environment. Because the Continuous Delivery Pipeline separates deployment from release, deployed features are not assumed to be live to end users. Rate your team\'s ability to continuously deploy features to production as well as the ability to control their visibility using feature toggles and/or other means.',
        'practise_safe_deployment_q2': '21.2 Monitoring implies that full-stack telemetry is active for all features deployed through the Continuous Delivery Pipeline so that system performance, end-user behavior, incidents and business value can be determined quickly and accurately in production. Rate your team\'s effectiveness at monitoring the full solution stack and ability to analyze feature value based on these events.',
        'practise_safe_deployment_q3': '21.3 Responding to unforeseen production incidents is critical to the Continuous Delivery Pipeline. Rate your team\'s effectiveness at proactively detecting high severity production issues, identifying root causes using monitoring systems and quickly resolving issues by building, testing and deploying fixes through the pipeline (versus applying changes directly in production).',
        'practise_safe_deployment_q4': '21.4 Deployments must be verified for completeness and integrity before releasing to end users. Rate your team\'s ability to accurately determine deployment success or failure and ability to roll back or fix forward as appropriate to correct deployment issues.',
    },
};
